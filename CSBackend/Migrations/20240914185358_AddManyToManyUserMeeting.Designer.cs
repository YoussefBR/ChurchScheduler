// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSBackend.Migrations
{
    [DbContext(typeof(ChurchSchedulerContext))]
    [Migration("20240914185358_AddManyToManyUserMeeting")]
    partial class AddManyToManyUserMeeting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSBackend.Models.Abouna", b =>
                {
                    b.Property<string>("AbounaId")
                        .HasColumnType("text");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                .IsRequired()
                .HasColumnType("text");

                    b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                    .IsRequired()
                    .HasColumnType("text");


                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AbounaId");

                    b.ToTable("Abounas");
                });

            modelBuilder.Entity("CSBackend.Models.AbounaMeeting", b =>
                {
                    b.Property<string>("AbounaId")
                        .HasColumnType("text");

                    b.Property<string>("MeetingId")
                        .HasColumnType("text");

                    b.HasKey("AbounaId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("AbounaMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.Meeting", b =>
                {
                    b.Property<string>("MeetingId")
                        .HasColumnType("text");

                    b.Property<string>("AbounaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeetingLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeetingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchedulingUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MeetingId");

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("CSBackend.Models.TimeSlot", b =>
                {
                    b.Property<string>("TimeSlotId")
                        .HasColumnType("text");

                    b.Property<string>("AbounaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TimeSlotId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("CSBackend.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CSBackend.Models.UserMeeting", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("MeetingId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("UserMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.AbounaMeeting", b =>
                {
                    b.HasOne("CSBackend.Models.Abouna", "Abouna")
                        .WithMany("AbounaMeetings")
                        .HasForeignKey("AbounaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSBackend.Models.Meeting", "Meeting")
                        .WithMany("AbounaMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abouna");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CSBackend.Models.Meeting", b =>
                {
                    b.HasOne("CSBackend.Models.TimeSlot", "TimeSlot")
                        .WithOne("Meeting")
                        .HasForeignKey("CSBackend.Models.Meeting", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("CSBackend.Models.UserMeeting", b =>
                {
                    b.HasOne("CSBackend.Models.Meeting", "Meeting")
                        .WithMany("UserMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSBackend.Models.User", "User")
                        .WithMany("UserMeetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CSBackend.Models.Abouna", b =>
                {
                    b.Navigation("AbounaMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.Meeting", b =>
                {
                    b.Navigation("AbounaMeetings");

                    b.Navigation("UserMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.TimeSlot", b =>
                {
                    b.Navigation("Meeting")
                        .IsRequired();
                });

            modelBuilder.Entity("CSBackend.Models.User", b =>
                {
                    b.Navigation("UserMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
