// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CSBackend.Migrations
{
    [DbContext(typeof(ChurchSchedulerContext))]
    [Migration("20240926060304_RemoveTableMigration")]
    partial class RemoveTableMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CSBackend.Models.Abouna", b =>
                {
                    b.Property<string>("AbounaId")
                        .HasColumnType("text");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AbounaId");

                    b.ToTable("Abounas");
                });

            modelBuilder.Entity("CSBackend.Models.AbounaMeeting", b =>
                {
                    b.Property<string>("AbounaId")
                        .HasColumnType("text");

                    b.Property<string>("MeetingId")
                        .HasColumnType("text");

                    b.HasKey("AbounaId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("AbounaMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.Meeting", b =>
                {
                    b.Property<string>("MeetingId")
                        .HasColumnType("text");

                    b.Property<string>("AbounaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DayOfMeeting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeetingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchedulingUserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchedulingUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MeetingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("CSBackend.Models.AbounaMeeting", b =>
                {
                    b.HasOne("CSBackend.Models.Abouna", "Abouna")
                        .WithMany("AbounaMeetings")
                        .HasForeignKey("AbounaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSBackend.Models.Meeting", "Meeting")
                        .WithMany("AbounaMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abouna");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("CSBackend.Models.Abouna", b =>
                {
                    b.Navigation("AbounaMeetings");
                });

            modelBuilder.Entity("CSBackend.Models.Meeting", b =>
                {
                    b.Navigation("AbounaMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
